/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.santander.internetbankingtestesantander.api;

import br.com.santander.internetbankingtestesantander.model.OperacaoValorRequest;
import br.com.santander.internetbankingtestesantander.model.OperacaoValorResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-28T18:51:37.779014-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "valores", description = "the valores API")
public interface ValoresApi {

    default ValoresApiDelegate getDelegate() {
        return new ValoresApiDelegate() {};
    }

    /**
     * POST /valores/depositar : Depósito de um valor na conta de um cliente.
     * Recurso disponibilizado para depositar um valor na conta de um Cliente.
     *
     * @param operacaoValorRequest Deve ser enviado o valor a ser DEPOSITADO, e a conta do cliente onde a operação será realizada. (required)
     * @return This is description (status code 200)
     */
    @ApiOperation(value = "Depósito de um valor na conta de um cliente.", nickname = "depositarValor", notes = "Recurso disponibilizado para depositar um valor na conta de um Cliente.", response = OperacaoValorResponse.class, tags={ "Valor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "This is description", response = OperacaoValorResponse.class) })
    @PostMapping(
        value = "/valores/depositar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OperacaoValorResponse> depositarValor(@ApiParam(value = "Deve ser enviado o valor a ser DEPOSITADO, e a conta do cliente onde a operação será realizada." ,required=true )  @Valid @RequestBody OperacaoValorRequest operacaoValorRequest) {
        return getDelegate().depositarValor(operacaoValorRequest);
    }


    /**
     * POST /valores/sacar : Saque de valor da conta de um cliente.
     * Recurso disponibilizado para sacar um valor da conta de um Cliente.
     *
     * @param operacaoValorRequest Deve ser enviado o valor o valor a ser SACADO, e a conta do cliente onde a operação será realizada. Sujeito a taxa administrativa definida em regra de negócio. (required)
     * @return This is description (status code 200)
     */
    @ApiOperation(value = "Saque de valor da conta de um cliente.", nickname = "sacarValor", notes = "Recurso disponibilizado para sacar um valor da conta de um Cliente.", response = OperacaoValorResponse.class, tags={ "Valor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "This is description", response = OperacaoValorResponse.class) })
    @PostMapping(
        value = "/valores/sacar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OperacaoValorResponse> sacarValor(@ApiParam(value = "Deve ser enviado o valor o valor a ser SACADO, e a conta do cliente onde a operação será realizada. Sujeito a taxa administrativa definida em regra de negócio." ,required=true )  @Valid @RequestBody OperacaoValorRequest operacaoValorRequest) {
        return getDelegate().sacarValor(operacaoValorRequest);
    }

}
