/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.santander.internetbankingtestesantander.api;

import br.com.santander.internetbankingtestesantander.model.TransacaoResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-28T22:01:12.498620-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "transacoes", description = "the transacoes API")
public interface TransacoesApi {

    default TransacoesApiDelegate getDelegate() {
        return new TransacoesApiDelegate() {};
    }

    /**
     * GET /transacoes/historico/{dataTransacoes} : Obter histórico de transações
     * Obter historico de transações em determinada data, para cada tipo de operação,(depósito ou saque), caso não seja preenchido será retornada resposta para ambas as operações.
     *
     * @param dataTransacoes Data em que se deseja obter as movimentações. (required)
     * @param tipoOperacao Tipo de operação a ser consultada. (optional)
     * @return Retornará uma lista de transações (status code 200)
     */
    @ApiOperation(value = "Obter histórico de transações", nickname = "obterHistoricoTransacoes", notes = "Obter historico de transações em determinada data, para cada tipo de operação,(depósito ou saque), caso não seja preenchido será retornada resposta para ambas as operações.", response = TransacaoResponse.class, tags={ "Transação", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retornará uma lista de transações", response = TransacaoResponse.class) })
    @GetMapping(
        value = "/transacoes/historico/{dataTransacoes}",
        produces = { "application/json" }
    )
    default ResponseEntity<TransacaoResponse> obterHistoricoTransacoes(@ApiParam(value = "Data em que se deseja obter as movimentações.",required=true) @PathVariable("dataTransacoes") String dataTransacoes,@ApiParam(value = "Tipo de operação a ser consultada.", allowableValues = "deposito, saque") @Valid @RequestParam(value = "tipoOperacao", required = false) String tipoOperacao) {
        return getDelegate().obterHistoricoTransacoes(dataTransacoes, tipoOperacao);
    }

}
